#version 460

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, rgba8) uniform readonly image2D inImage;
layout(binding = 1, rgba8) uniform image2D outImage;

//convolution kernel 3x3 float matrix in row major order
//using specialization constants. Default is unity.
layout(constant_id = 0) const float KERNEL_11 = 0.0;
layout(constant_id = 1) const float KERNEL_12 = 0.0;
layout(constant_id = 2) const float KERNEL_13 = 0.0;
layout(constant_id = 3) const float KERNEL_21 = 0.0;
layout(constant_id = 4) const float KERNEL_22 = 1.0;
layout(constant_id = 5) const float KERNEL_23 = 0.0;
layout(constant_id = 6) const float KERNEL_31 = 0.0;
layout(constant_id = 7) const float KERNEL_32 = 0.0;
layout(constant_id = 8) const float KERNEL_33 = 0.0;

//specialization constants can only be scalars so we have to
//build the array here
float kernel[] = {
    KERNEL_11, KERNEL_12, KERNEL_13,
    KERNEL_21, KERNEL_22, KERNEL_23,
    KERNEL_31, KERNEL_32, KERNEL_33
};

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    int n = 0;
    vec3 outColor = vec3(0.0, 0.0, 0.0);
    for (int i = -1; i < 2; ++i) {
        for (int j = -1; j < 2; ++j) {
            //imageLoad returns all zero outside image
            vec3 rgb = imageLoad(inImage, ivec2(i, j) + pos).rgb; //drop alpha
            outColor += rgb * kernel[n++];
        }
    }

    //clamp component wise
    outColor = clamp(outColor, 0.0, 1.0);

    //imageStore does nothing outside the image, so we dont need boundary checks
    imageStore(outImage, pos, vec4(outColor.rgb, 1.0));
}
